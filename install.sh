#!/bin/bash

set -e

echo "======================================"
echo "–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Telegram –±–æ—Ç–∞ —Å Ollama"
echo "======================================"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [ "$EUID" -ne 0 ]; then 
    echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
    exit 1
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
echo "[1/6] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
apt update -y
apt upgrade -y
apt install -y curl wget git

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
echo "[2/6] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
if ! command -v docker &> /dev/null; then
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm get-docker.sh
    systemctl start docker
    systemctl enable docker
    echo "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
else
    echo "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
echo "[3/6] –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..."
if ! docker compose version &> /dev/null; then
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    apt-get install -y docker-compose-plugin
fi

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
echo "[4/6] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
REAL_USER=${SUDO_USER:-$USER}
usermod -aG docker $REAL_USER
echo "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $REAL_USER –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
echo "[5/6] –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
PROJECT_DIR="/opt/telegram-bot-ollama"
mkdir -p $PROJECT_DIR
cd $PROJECT_DIR

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
echo "[6/6] –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
cat > .env << 'EOF'
# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)
TELEGRAM_BOT_TOKEN=YOUR_TELEGRAM_BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Ollama
OLLAMA_HOST=ollama
OLLAMA_PORT=11434
OLLAMA_MODEL=gpt-oss:20b

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
CONTEXT_MEMORY_SIZE=8
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml
cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_ORIGINS=*
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bot_network

  telegram-bot:
    build: .
    container_name: telegram-bot
    depends_on:
      ollama:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - bot_network

volumes:
  ollama_data:

networks:
  bot_network:
    driver: bridge
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ Dockerfile
cat > Dockerfile << 'EOF'
FROM python:3.12-slim

WORKDIR /app

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ requirements.txt
COPY requirements.txt .

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –±–æ—Ç–∞
COPY bot.py .

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
CMD ["python", "-u", "bot.py"]
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt
cat > requirements.txt << 'EOF'
python-telegram-bot==20.7
ollama==0.3.3
nest-asyncio==1.6.0
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ bot.py
cat > bot.py << 'EOF'
import logging
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import ollama
import nest_asyncio
import asyncio

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OLLAMA_HOST = os.getenv('OLLAMA_HOST', 'ollama')
OLLAMA_PORT = os.getenv('OLLAMA_PORT', '11434')
OLLAMA_MODEL = os.getenv('OLLAMA_MODEL', 'gpt-oss:20b')
CONTEXT_SIZE = int(os.getenv('CONTEXT_MEMORY_SIZE', '8'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Ollama
ollama_client = ollama.Client(host=f'http://{OLLAMA_HOST}:{OLLAMA_PORT}')

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
context_memory = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = update.effective_user.first_name
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n'
        f'–Ø –ª–æ–∫–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ {OLLAMA_MODEL}.\n'
        f'–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!\n\n'
        f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.'
    )

async def clear_context(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    user_id = update.effective_user.id
    if user_id in context_memory:
        context_memory[user_id] = []
    await update.message.reply_text('–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω! üßπ')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in context_memory:
        context_memory[user_id] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context_memory[user_id].append({'role': 'user', 'content': message_text})
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ N —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    context_memory[user_id] = context_memory[user_id][-CONTEXT_SIZE:]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await update.message.chat.send_action(action="typing")
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Ollama
        response = ollama_client.chat(
            model=OLLAMA_MODEL,
            messages=context_memory[user_id]
        )
        
        response_text = response['message']['content']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_memory[user_id].append({'role': 'assistant', 'content': response_text})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(response_text)
        
        logger.info(f"User {user_id}: successful response")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Ollama: {e}")
        await update.message.reply_text(
            '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.'
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")

async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –º–æ–¥–µ–ª—å—é {OLLAMA_MODEL}")
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('clear', clear_context))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    asyncio.run(main())
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
cat > manage.sh << 'EOF'
#!/bin/bash

case "$1" in
    start)
        echo "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose up -d
        echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Ollama..."
        sleep 10
        echo "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ gpt-oss:20b..."
        docker exec ollama ollama pull gpt-oss:20b
        echo "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
        ;;
    stop)
        echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose down
        echo "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
        ;;
    restart)
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose restart
        ;;
    logs)
        docker compose logs -f telegram-bot
        ;;
    logs-ollama)
        docker compose logs -f ollama
        ;;
    status)
        docker compose ps
        ;;
    pull-model)
        if [ -z "$2" ]; then
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./manage.sh pull-model <model-name>"
            echo "–ü—Ä–∏–º–µ—Ä: ./manage.sh pull-model llama3:latest"
        else
            docker exec ollama ollama pull "$2"
        fi
        ;;
    list-models)
        docker exec ollama ollama list
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./manage.sh {start|stop|restart|logs|logs-ollama|status|pull-model|list-models}"
        exit 1
        ;;
esac
EOF

chmod +x manage.sh

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
chown -R $REAL_USER:$REAL_USER $PROJECT_DIR

echo ""
echo "======================================"
echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "======================================"
echo ""
echo "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª $PROJECT_DIR/.env"
echo "   –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: nano $PROJECT_DIR/.env"
echo ""
echo "2. –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ Docker"
echo "   –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
echo ""
echo "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:"
echo "   cd $PROJECT_DIR"
echo "   ./manage.sh start"
echo ""
echo "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  ./manage.sh stop          - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
echo "  ./manage.sh restart       - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
echo "  ./manage.sh logs          - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –±–æ—Ç–∞"
echo "  ./manage.sh logs-ollama   - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Ollama"
echo "  ./manage.sh status        - —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
echo "  ./manage.sh list-models   - —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"
echo "  ./manage.sh pull-model <model> - –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å"
echo ""
